package CH.ifa.draw.standard;

import CH.ifa.draw.framework.*;
import CH.ifa.draw.util.Undoable;
import CH.ifa.draw.util.AbstractUndoableTool;
import java.util.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.KeyEvent;
import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import CH.ifa.draw.util.UndoableAdapter;
import CH.ifa.draw.util.Undoable;

public abstract class AbstractTracker extends AbstractUndoableTool{
	
	protected boolean isHandleTracker = false;
	protected boolean isSelectAreaTracker = false;
	protected boolean isDragTracker = false;
	
	protected Handle fAnchorHandle;
	protected Rectangle fSelectGroup;
	protected Figure fAnchorFigure;
	protected int fLastX;
	protected int fLastY;
	protected boolean fMoved = false;
	
	public AbstractTracker(DrawingEditor editor) {
		super(editor);
	}
	
	public void mouseDown(MouseEvent e, int x, int y) {
		super.mouseDown(e, x, y);
	}
	
	public void mouseUp(MouseEvent e, int x, int y) {
		super.mouseDown(e, x, y);
	}
	
	public void mouseDrag(MouseEvent e, int x, int y) {
		super.mouseDown(e, x, y);
	}
	
	protected void rubberBand(int x1, int y1, int x2, int y2) {
		fSelectGroup = new Rectangle(new Point(x1, y1));
		fSelectGroup.add(new Point(x2, y2));
		drawXORRect(fSelectGroup);
	}

	protected void eraseRubberBand() {
		drawXORRect(fSelectGroup);
	}

	protected void drawXORRect(Rectangle r) {
		Graphics g = view().getGraphics();
		if ( g != null ) {
			try {
				g.setXORMode(view().getBackground());
				g.setColor(Color.black);
				g.drawRect(r.x, r.y, r.width, r.height);
			}
			finally {
				g.dispose(); // SF bugtracker id: #490663
			}
		}
	}
	
	protected void selectGroup(boolean toggle) {
		FigureEnumeration k = drawing().figuresReverse();
		while (k.hasMoreElements()) {
			Figure figure = k.nextFigure();
			Rectangle r2 = figure.displayBox();
			if (fSelectGroup.contains(r2.x, r2.y) && fSelectGroup.contains(r2.x+r2.width, r2.y+r2.height)) {
				if (toggle) {
					view().toggleSelection(figure);
				}
				else {
					view().addToSelection(figure);
				}
			}
		}
	}
	
	protected Undoable createUndoActivity() {
		return new AbstractTracker.UndoActivity(view(), new Point(fLastX, fLastY));
	}
	
	public static class UndoActivity extends UndoableAdapter {
		private Point myOriginalPoint;
		private Point myBackupPoint;
		
		public UndoActivity(DrawingView newDrawingView, Point newOriginalPoint) {
			super(newDrawingView);
			setOriginalPoint(newOriginalPoint);
			setUndoable(true);
			setRedoable(true);
		}

		/*
		 * Undo the activity
		 * @return true if the activity could be undone, false otherwise
		 */
		public boolean undo() {
			if (!super.undo()) {
				return false;
			}
			moveAffectedFigures(getBackupPoint(), getOriginalPoint());
			return true;
		}

		/*
		 * Redo the activity
		 * @return true if the activity could be redone, false otherwise
		 */
		public boolean redo() {
			if (!super.redo()) {
				return false;
			}
			moveAffectedFigures(getOriginalPoint(), getBackupPoint());
			return true;
		}
		public void setBackupPoint(Point newBackupPoint) {
			myBackupPoint = newBackupPoint;
		}
		
		public Point getBackupPoint() {
			return myBackupPoint;
		}
		
		public void setOriginalPoint(Point newOriginalPoint) {
			myOriginalPoint = newOriginalPoint;
		}
		
		public Point getOriginalPoint() {
			return myOriginalPoint;
		}
		
		public void moveAffectedFigures(Point startPoint, Point endPoint) {
			FigureEnumeration figures = getAffectedFigures();
			while (figures.hasMoreElements()) {
				figures.nextFigure().moveBy(endPoint.x - startPoint.x,
					endPoint.y - startPoint.y);
			}
		}
	}
}

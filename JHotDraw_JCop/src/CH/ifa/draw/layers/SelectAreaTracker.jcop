package CH.ifa.draw.layers;

public layer SelectAreaTracker {
	
	after public void CH.ifa.draw.contrib.DragNDropTool.mouseDown(MouseEvent e, int x, int y) {
		// use event coordinates to supress any kind of
		// transformations like constraining points to a grid
		super.mouseDown(e, e.getX(), e.getY());
		rubberBand(fAnchorX, fAnchorY, fAnchorX, fAnchorY);
	}

	public void CH.ifa.draw.contrib.DragNDropTool.mouseDrag(MouseEvent e, int x, int y) {
		super.mouseDrag(e, x, y);
		eraseRubberBand();
		rubberBand(fAnchorX, fAnchorY, x, y);
	}

	after public void CH.ifa.draw.contrib.DragNDropTool.mouseUp(MouseEvent e, int x, int y) {
		super.mouseUp(e, x, y);
		eraseRubberBand();
		selectGroup(e.isShiftDown());
		isSelectAreaTracker = false;
		fChildExistence = false;
	}
	
	after public void CH.ifa.draw.standard.SelectionTool.mouseDown(MouseEvent e, int x, int y) {
		// use event coordinates to supress any kind of
		// transformations like constraining points to a grid
		super.mouseDown(e, e.getX(), e.getY());
		rubberBand(fAnchorX, fAnchorY, fAnchorX, fAnchorY);
		activate();
	}

	public void CH.ifa.draw.standard.SelectionTool.mouseDrag(MouseEvent e, int x, int y) {
		super.mouseDrag(e, x, y);
		eraseRubberBand();
		rubberBand(fAnchorX, fAnchorY, x, y);
	}

	after public void CH.ifa.draw.standard.SelectionTool.mouseUp(MouseEvent e, int x, int y) {
		super.mouseUp(e, x, y);
		eraseRubberBand();
		selectGroup(e.isShiftDown());
		deactivate();
		isSelectAreaTracker = false;
		fChildExistence = false;
	}
	
	public void CH.ifa.draw.standard.SelectionTool.activate() {
		super.activate();
	}
	
	public void CH.ifa.draw.standard.SelectionTool.deactivate() {
		super.deactivate();
	}
}
